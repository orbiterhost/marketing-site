name: Blog Notifications
on:
  workflow_run:
    workflows: ["Deploy"]
    types:
      - completed
    branches:
      - main

jobs:
  send-blog-notifications:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 2 # Fetch the last 2 commits

      # Modified check for blog changes
      - name: Check for blog changes
        id: check_changes
        run: |
          git fetch origin ${{ github.event.workflow_run.head_branch }}

          if git rev-parse HEAD^1 >/dev/null 2>&1; then
            # Get the diff and look for added "publish: true" in blog files
            PUBLISHED_POST=$(git diff HEAD^1 HEAD -- 'src/content/blog/*.mdx' | grep -B5 '^\+publish: true' || true)

            if [ -n "$PUBLISHED_POST" ]; then
              echo "New published blog post detected"
              echo "has_changes=true" >> $GITHUB_OUTPUT

              # Extract the file name of the changed post
              FILE_NAME=$(git diff --name-only HEAD^1 HEAD -- 'src/content/blog/*.mdx' | head -n1)
              echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
            else
              echo "No newly published blog posts"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            # For first commit, check for any files with publish: true
            PUBLISHED_POST=$(git ls-files 'src/content/blog/*.mdx' | xargs grep -l "publish: true" || true)

            if [ -n "$PUBLISHED_POST" ]; then
              echo "Published blog post found in initial commit"
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "file_name=$PUBLISHED_POST" >> $GITHUB_OUTPUT
            else
              echo "No published blog posts in initial commit"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set up Node.js
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        if: steps.check_changes.outputs.has_changes == 'true'
        run: npm install axios xml2js

      - name: Fetch RSS and call API
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          node -e '
            const axios = require("axios");
            const xml2js = require("xml2js");

            async function main() {
              try {
                // Fetch the RSS feed
                const response = await axios.get("https://orbiter.host/rss.xml");
                const parser = new xml2js.Parser();
                const result = await parser.parseStringPromise(response.data);

                // Get all items and sort them by pubDate (newest first)
                const items = result.rss.channel[0].item;
                const sortedItems = items.sort((a, b) => {
                  const dateA = new Date(a.pubDate[0]);
                  const dateB = new Date(b.pubDate[0]);
                  return dateB - dateA; // Descending order (newest first)
                });

                // Get the latest item (first item after sorting)
                const latestItem = sortedItems[0];

                // Extract the data you need
                const title = latestItem.title[0];
                const link = latestItem.link[0];
                const description = latestItem.description[0];
                const pubDate = latestItem.pubDate[0];

                console.log(`Latest item: ${title}`);
                console.log(`Published date: ${pubDate}`);

                // Call the API with the data
                const apiResponse = await axios.post("https://frames.orbiter.host/new_post", {
                  title,
                  link,
                  description
                }, {
                  headers: {
                    "X-Orbiter-Admin": `${process.env.ADMIN_KEY}`,
                    "Content-Type": "application/json"
                  }
                });

                console.log("API call successful:", apiResponse.status);
                console.log(apiResponse.data)
              } catch (error) {
                console.error("Error:", error.message);
                process.exit(1);
              }
            }

            main();
          '
        env:
          ADMIN_KEY: ${{ secrets.ADMIN_KEY }}
